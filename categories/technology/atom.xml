<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Cyclohexane >_<]]></title>
  <link href="http://zhantongz.github.io//github/categories/technology/atom.xml" rel="self"/>
  <link href="http://zhantongz.github.io//github/"/>
  <updated>2014-05-27T05:19:02+00:00</updated>
  <id>http://zhantongz.github.io//github/</id>
  <author>
    <name><![CDATA[Zhantong Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Codes for Some Sorting Methods]]></title>
    <link href="http://zhantongz.github.io//github/2014/05/19/java-codes-for-some-sorting-methods/"/>
    <updated>2014-05-19T08:06:09+00:00</updated>
    <id>http://zhantongz.github.io//github/2014/05/19/java-codes-for-some-sorting-methods</id>
    <content type="html"><![CDATA[<p>``` java Insertion Sort
public static void insSort(int[] a) {</p>

<pre><code>int mark = 0; // current insertion value

for (int i = 1; i &lt; a.length; i++) {
    mark = a[i];

    int j = i - 1;
    while (j &gt;= 0 &amp;&amp; a[j] &gt; mark) {
        int temp = a[j];
        a[j] = a[j + 1];
        a[j + 1] = temp;
        j--;
    }
}
</code></pre>

<p>}
```</p>

<p>``` java Selection Sort
public static void selSort(int[] a) {</p>

<pre><code>for (int i = 0; i &lt; a.length; i++) {
    int minSpot = i;

    for (int j = i + 1; j &lt; a.length; j++)
        if (a[j] &lt; a[minSpot] ) {
            int temp = a[minSpot] ;
            a[minSpot] = a[j];
            a[j] = temp;
        }
}
</code></pre>

<p>}
```</p>

<p>``` java Bubble Sort
public static void bubSort(int[] a) {</p>

<pre><code>for (int i = 0; i &lt; a.length; i++)
    for (int j = i + 1; j &lt; a.length; j++)
        if (a[j] &lt; a[i]) {
            int temp = a[j];
            a[j] = a[i];
            a[i] = temp;
        }
</code></pre>

<p>}
```</p>

<p>``` java Quick Sort
public static void qckSort(int[] a, int lm, int rm) {</p>

<pre><code>// end of recursion
if (lm &lt; rm) {
    int pivot = a[lm + (rm - lm) / 2]; // pivot in the middle

    // divide et conquer
    int lf = lm, rf = rm; // mark flags be the markers
    while (lf &lt;= rf) {
        while (a[lf] &lt; pivot)
            lf++;

        while (a[rf] &gt; pivot)
            rf--;

        if (lf &lt; rf) {
            int temp = a[rf];
            a[rf] = a[lf];
            a[lf] = temp;
            lf++;
            rf--;
        } else if (lf == rf) {
            lf++;
            rf--;
        }
    }

    // recursion
    if (rm &gt; lf)
        qckSort(a, lf, rm);
    if (lm &lt; rf)
        qckSort(a, lm, rf);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying New Email Service Provided by Namecheap]]></title>
    <link href="http://zhantongz.github.io//github/2014/04/06/trying-new-email-service-provided-by-namecheap/"/>
    <updated>2014-04-06T17:45:07+00:00</updated>
    <id>http://zhantongz.github.io//github/2014/04/06/trying-new-email-service-provided-by-namecheap</id>
    <content type="html"><![CDATA[<p>As this domain <em>zhantong.org</em> is purchased from Namecheap, I can enjoy (maybe?) its email service without any charge for 2 months. I used QQ Business Email. It&rsquo;s good, however, it may block English messages as spam. So I start the trial with Namecheap email hosting yesterday. I&rsquo;ll write my experience in this post.</p>

<!--more-->


<p>It is a good thing that Namecheap uses Open-Xchange (OX) so that it has a much-better-looking UI instead of ugly ISP-provided email (which is a lot better than my CBE email before it switches to Google Apps). The UI is easy to use because it is simple.</p>

<p>The Contacts feature has a separate folder to store people who I send email to (I could add people who send me email, too).</p>

<p>It provides a web drive. Though it claims that it support WebDav, I cannot mount it in Nautilus with an HTTP 402 error. It support document viewer (and can be used to view email attachment). OX has a function to edit, but, an expensive Buisiness plan is required.</p>

<p><img src="/images/2014-04-06-email-1.png" title="Namecheap's pricing and features for email hosting" alt="Namecheap's pricing and features for email hosting" /></p>

<p>Namecheap email hosting: [<a href="https://www.namecheap.com/hosting/email.aspx">https://www.namecheap.com/hosting/email.aspx</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Swing GUI Intro (4)]]></title>
    <link href="http://zhantongz.github.io//github/2014/03/16/java-swing-gui-intro-4/"/>
    <updated>2014-03-16T05:28:47+00:00</updated>
    <id>http://zhantongz.github.io//github/2014/03/16/java-swing-gui-intro-4</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve talked about flow-layout, an easy-to-use layout. However, sometimes, you&rsquo;d like let the user change the window size while maintaining the relative layout. That&rsquo;s when we should use grid-layout. <em>UPDATING</em></p>

<!--more-->


<p>Grid-layout is a layout (obviously) that make a grid on the window. You can specify the number of rows and columns and put components into a box of the grid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple YouTube Embedment With Alternate Source for Jekyll]]></title>
    <link href="http://zhantongz.github.io//github/2014/03/03/simple-youtube-embedment-with-alternate-source-for-jekyll/"/>
    <updated>2014-03-03T03:26:00+00:00</updated>
    <id>http://zhantongz.github.io//github/2014/03/03/simple-youtube-embedment-with-alternate-source-for-jekyll</id>
    <content type="html"><![CDATA[<p>As this blog is potentially for viewers from Mainland China, it&rsquo;s necessary to have a backup video for the stupid GFW. This plugin can use YouTube and Tudou as video sources.</p>

<!--more-->


<p>Installation: Put <em>youtubeCN.js</em> in <strong>ROOT_PATH/source/javascripts</strong> and <em>youtube_gfw.rb</em> in <strong>ROOT_PATH/plugins</strong>.<br/>
Preview: <a href="/1970/01/01/test/">Test</a></p>

<p><code>js youtubeCN.js
// put it in source/javascripts/ directory
var icon = "http://s.ytimg.com/yts/img/favicon-vfldLzJxy.ico";
var locationWall = (! $('&lt;img src="'+ icon +'"&gt;').load()); // false if out of Mainland; true otherwise
var plid="td"; // remove tudou if outside of Mainland
if(locationWall)
{
plid="yt" // remove youtube if inside of Mainland
}
var player=document.getElementById(plid);
player.parentNode.removeChild(player);
</code>
``` ruby youtube_gfw.rb# Title: Simple YouTube embedment with alternate source for Jekyll</p>

<h1>Author: Zhantong Zhang <a href="http://zhantong.org">http://zhantong.org</a></h1>

<h1>Description: Easily output embeded YouTube video with a backup inside GFW (Tudou).</h1>

<h1>Use: Put this file in plugins/ and youtubeCN.js in source/javascripts</h1>

<h1></h1>

<h1>Syntax  {% ytb youtube/id [width height] [autopage] [tudou/id] %} </h1>

<p>module Jekyll</p>

<p>  class YtbGFW &lt; Liquid::Tag</p>

<pre><code>@width = ''
@height = ''
@autoplay = 0
@id = ''
@td_id = ''

def initialize(tag_name, markup, tokens)
  super
  parameters = markup.split(" ")
  @id = parameters.first
  @td_id = parameters.last
  @width = parameters[1]
  @height = parameters[2]
  @config = 
  @root_url = Jekyll.configuration({})['url']
  if parameters[1] =~ /^\d+$/
    if parameters[2] =~ /^\d+$|^\d+px$|^\d+%$/
      @autoplay = parameters[3]
    else
      @autoplay = parameters[1]
    end
  end
end

def render(context)
  if @td_id != @id
    %(&lt;div class="embed-video-container" width="#{@width}" id="yt"&gt;&lt;iframe id="ytplayer" type="text/html" width="#{@width}" src="http://www.youtube.com/embed/#{@id}?autoplay=#{@autoplay}&amp;origin=http://blog.zhantong.org" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="embed-video-container flash-video" id="td"&gt;&lt;iframe id="tdplayer" src="http://www.tudou.com/programs/view/html5embed.action?code=#{@td_id}&amp;resourceId=356292153_06_05_99" allowtransparency="true" scrolling="no" border="0" frameborder="0" style="width:#{@width};"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script src="#{@root_url}/javascripts/youtubeCN.js" type="text/javascript"&gt;&lt;/script&gt;)
  else
    %(&lt;div class="embed-video-container" id="yt" width="#{@width}&gt;&lt;iframe id="ytplayer" type="text/html" width="#{@width}" src="http://www.youtube.com/embed/#{@id}?autoplay=#{@autoplay}&amp;origin=http://blog.zhantong.org" frameborder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script src="#{@root_url}/javascripts/youtubeCN.js" type="text/javascript"&gt;&lt;/script&gt;)
  end
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>Liquid::Template.register_tag(&lsquo;ytb&rsquo;, Jekyll::YtbGFW)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Swing GUI Intro (3)]]></title>
    <link href="http://zhantongz.github.io//github/2014/03/01/java-swing-gui-intro-3/"/>
    <updated>2014-03-01T18:30:00+00:00</updated>
    <id>http://zhantongz.github.io//github/2014/03/01/java-swing-gui-intro-3</id>
    <content type="html"><![CDATA[<p>After creating different components, the program doesn&rsquo;t actually do anything. If you click a button or enter something into a text-field, nothing will happen. That&rsquo;s because you didn&rsquo;t tell the computer what to do. In order to make the program interactive, you need an action listener (to monitor if an action happened, e.g a button is clicked) and an event handler (to tell the program to do something, e.g. update a label).</p>

<!--more-->


<p>In order to do it, we need to create a new class to handle things. You can create a private class called <em>ButtonHandler</em> (as it will handle the button we created) inside <em>GUIExample</em>.
``` java GUIExample.java
package example;
// imported classes omitted
public class GUIExample extends JFrame {</p>

<pre><code>// previous delaration omitted
private JTextField echo;

public GUIExample() {
    // previous assignments and settings omitted
    // change following

    echo = new JTextField("Eh?", 20);
    echo.setEditable(false);
    add(echo);

    textfield = new JTextField("Enter something, ^_^", 20); // create a textfield with a default line "I'm a text field!"
    add(textfield);

    button = new JButton("Click me"); // create a button that reads "Click me"
    add(button);
}

private class ButtonHandler implements ActionListener { // implements ActionListener as the click of a button is an action
}
</code></pre>

<p>}
```
What we want to do is that entering something in <strong>textfield</strong> and clicking <strong>button</strong> will let <strong>echo</strong> show anything you entered plus &ldquo; Eh?&rdquo;. You could also change <strong>anotherLb</strong> to &ldquo;Echoed&rdquo;.</p>

<p>You may notice that there is an error for <em>ButtonHandler</em>, as you did not have the required method in your class when you implement ActionListener. We&rsquo;ll add <em>actionPerformed(ActionEvent e)</em> to the class. As you may use a handler for multiple objects, it&rsquo;s a good idea to specify the source of the event.
``` java
public void actionPerformed(ActionEvent e) { // you must have this method as you implemented ActionListener</p>

<pre><code>if (e.getSource() == button) { // make sure it's _button_ that is clicked
    anotherLb.setText("Echoed"); // change anotherLb's text to "Echoed"
    echo.setText(textfield.getText() + " Eh?"); // change the text of echo to anything you entered plus "Eh?"
}
</code></pre>

<p>}
<code>
If you run the program and click button, there will be nothing changed. Although you created a handler, you did not use it (i.e. you did not tell the computer when should it use the handler and the handler what should it listen to). You need to add the handler to **button**. Add following to *GUIExample()*:
</code> java
ButtonHandler buttonHandler = new ButtonHandler();
button.addActionListener(buttonHandler);
```
Now, it works. To use a handler to process multiple objects, you can just add another if statement (switch can work sometimes) specifying the source. And, don&rsquo;t forget to <em>addActionListener(ActionListener l)</em>.</p>

<p>Using a button is a good way to specify what the button do because you can change the text on the button; however, you want press Enter in the textfield and it will do something. In Java Swing, the textfield can &ldquo;perform&rdquo; an action when you press Enter which will trigger an ActionListener. In this echo case, you can change as following (although <em>ButtonHandler</em> may not be a good name).
``` java
public void actionPerformed(ActionEvent e) { // you must have this method as you implemented ActionListener</p>

<pre><code>if (e.getSource() == textfield) { // make sure it's _button_ that is clicked
    anotherLb.setText("Echoed"); // change anotherLb's text to "Echoed"
    echo.setText(e.getActionCommand() + " Eh?"); // change the text of echo to anything you entered plus "Eh?"
} // you can add following if you want button to work too
else if (e.getSource() == button) {
    anotherLb.setText("Echoed"); // change anotherLb's text to "Echoed"
    echo.setText(textfield.getText() + " Eh?"); // change the text of echo to anything you entered plus "Eh?"
}
</code></pre>

<p>}
```
Don&rsquo;t forget to add/delete <em>addActionListener(ActionListener l)</em>.</p>
]]></content>
  </entry>
  
</feed>
