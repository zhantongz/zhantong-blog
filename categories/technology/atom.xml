<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Zhantong's Blog]]></title>
  <link href="http://blog.zhantong.org/categories/technology/atom.xml" rel="self"/>
  <link href="http://blog.zhantong.org/"/>
  <updated>2014-02-04T19:24:25+00:00</updated>
  <id>http://blog.zhantong.org/</id>
  <author>
    <name><![CDATA[Zhantong Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Swing GUI Intro (1)]]></title>
    <link href="http://blog.zhantong.org/2014/02/04/java-swing-gui-intro-1/"/>
    <updated>2014-02-04T06:45:21+00:00</updated>
    <id>http://blog.zhantong.org/2014/02/04/java-swing-gui-intro-1</id>
    <content type="html"><![CDATA[<p>Graphic User Interface (GUI) has more fun than console (somebody thinks so). In Java, we can use Swing, a native library for GUI, to create a GUI application instead of an application only interacting with console.</p>

<!--more-->


<p>First, we need create two Java sources in the same package.
``` java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {

}
</code></pre>

<p>}
<code>
</code> java GUIExample.java
package example;</p>

<p>public class GUIExample {</p>

<p>}
<code>
Let GUIExample extend JFrame, i.e. GUIExample is a JFrame (a window). Don't forget import appropriate packages/classes.
</code> java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;</p>

<p>public class GUIExample extends JFrame {</p>

<p>}
<code>
Now, we have a empty class, we need a constructor for this class for a window.
</code> java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;</p>

<p>public class GUIExample extends JFrame {</p>

<pre><code>private static final long serialVersionUID = -8892132944702143244L; // remove warning in eclipse

public GUIExample() {
    // create a JFrame (superclass) with a title
    super("GUI Intro"); // "GUI Intro" is the title for the window
}
</code></pre>

<p>}
<code>
Til now, no other class refers to GUIExample. Main class is for running the window:
</code> java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {
    GUIExample window = new GUIExample(); // create a GUIExample called window
    window.setVisible(true); // show the window
}
</code></pre>

<p>}
<code>
If you run the program, you should see a very small "window" in your desktop environment. Obviously, it should not be such small.
</code> java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {
    GUIExample window = new GUIExample(); // create a GUIExample called window
    window.setBounds(0, 0, 300, 500); // set the window with size of 300 * 500 at (0, 0) of your screen, i.e. up-left corner
    window.setVisible(true); // show the window
}
</code></pre>

<p>}
```
Compile and run; you should see a medium-sized window in your up-left corner. The program doesn&rsquo;t do anything except show a empty window.</p>

<p>Known how to set up a window, we can add components (such as buttons, labels, password fields) into the window.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World! 你好世界！Saluton Mondo!]]></title>
    <link href="http://blog.zhantong.org/2014/02/02/hello-world-ni-hao-shi-jie-saluton-mondo/"/>
    <updated>2014-02-02T23:32:36+00:00</updated>
    <id>http://blog.zhantong.org/2014/02/02/hello-world-ni-hao-shi-jie-saluton-mondo</id>
    <content type="html"><![CDATA[<p>Hello World! 你好世界！Saluton Mondo!</p>

<!--more-->


<p><code>php php
&lt;?php
echo "hello, world";
echo "你好世界";
echo "saluton, mondo";
?&gt;
</code>
``` cpp c++</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int main()
{
  cout &lt;&lt; &ldquo;hello, world&rdquo; &lt;&lt; endl;
  cout &lt;&lt; &ldquo;你好世界&rdquo; &lt;&lt; endl;
  cout &lt;&lt; &ldquo;saluton, mondo&rdquo; &lt;&lt; endl;
  return 0;
}
<code>
</code> go golang <br/>
package main</p>

<p>func main() {
  println(&ldquo;hello, world&rdquo;)
  println(&ldquo;你好世界&rdquo;)
  println(&ldquo;saluton, mondo&rdquo;)
}
<code>
</code> html HTML
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;hello, world&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;p&gt;hello, world&lt;/p&gt;
&lt;p&gt;你好世界&lt;/p&gt;
&lt;p&gt;saluton, mondo&lt;/p&gt;
</code></pre>

<p>  </body>
</html>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrated to Github Pages Powered by Octopress]]></title>
    <link href="http://blog.zhantong.org/2014/02/02/migrated-to-github-pages-powered-by-octopress/"/>
    <updated>2014-02-02T23:16:16+00:00</updated>
    <id>http://blog.zhantong.org/2014/02/02/migrated-to-github-pages-powered-by-octopress</id>
    <content type="html"><![CDATA[<p>Migrated to Github Pages!</p>
]]></content>
  </entry>
  
</feed>
