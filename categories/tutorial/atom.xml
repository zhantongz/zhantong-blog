<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Zhantong's Blog]]></title>
  <link href="http://blog.zhantong.org/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://blog.zhantong.org/"/>
  <updated>2014-02-09T19:20:31+00:00</updated>
  <id>http://blog.zhantong.org/</id>
  <author>
    <name><![CDATA[Zhantong Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Swing GUI Intro (2)]]></title>
    <link href="http://blog.zhantong.org/2014/02/05/java-swing-gui-intro-2/"/>
    <updated>2014-02-05T06:22:41+00:00</updated>
    <id>http://blog.zhantong.org/2014/02/05/java-swing-gui-intro-2</id>
    <content type="html"><![CDATA[<p>In the last post, we created a simple and empty window. In this post, we&rsquo;ll talk about how to add other <strong>components</strong> into the window.</p>

<!--more-->


<p>Known how to set up a window, we can add <strong>components</strong> (such as buttons, labels, password fields) into the frame. First, we can add a label saying &ldquo;hello, world&rdquo;.
``` java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;
import javax.swing.JLabel;</p>

<p>public class GUIExample extends JFrame {</p>

<pre><code>private static final long serialVersionUID = -8892132944702143244L; // to remove warning in eclipse
private JLabel helloWorld; // create a (J)Label named helloWorld

public GUIExample() {
    // create a JFrame (superclass) with a title
    super("GUI Intro"); // "GUI Intro" is the title for the window

    helloWorld = new JLabel("hello, world"); // create a label saying "hello, world" 
                                            // and assign it to helloWorld
    add(helloWorld); // add the label to the window (GUIExample)
}   
</code></pre>

<p>}
<code>
Run it and you'll find that the window shows "hello, world" vertically-centering and horizontally-left. If you create another label and add it to the window like this:
</code> java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;
import javax.swing.JLabel;</p>

<p>public class GUIExample extends JFrame {</p>

<pre><code>private static final long serialVersionUID = -8892132944702143244L; // to remove warning in eclipse
private JLabel helloWorld; // create a (J)Label named helloWorld
private JLabel anotherLb;

public GUIExample() {
    // create a JFrame (superclass) with a title
    super("GUI Intro"); // "GUI Intro" is the title for the window

    helloWorld = new JLabel("hello, world"); // create a label saying "hello, world" 
                                            // and assign it to helloWorld
    add(helloWorld); // add the label to the window (GUIExample)

    anotherLb = new JLabel("just another label");
    add(anotherLb);
}   
</code></pre>

<p>}
<code>
an interesting thing happened: "hello, world" is replaced by "just another label". There are lots of instances that you would not want that. The reason for this is that there is no layout in the frame; Java doesn't know where to place them. Thus, we need add a layout. The simplest layout is *flow-layout*. Like its name, it just put components side by side. Add this layout:
</code> java GUIExample.java
package example;</p>

<p>import java.awt.FlowLayout;</p>

<p>import javax.swing.JFrame;
import javax.swing.JLabel;</p>

<p>public class GUIExample extends JFrame {</p>

<pre><code>private static final long serialVersionUID = -8892132944702143244L; // to remove warning in eclipse
private JLabel helloWorld; // create a (J)Label named helloWorld
private JLabel anotherLb;

public GUIExample() {
    // create a JFrame (superclass) with a title
    super("GUI Intro"); // "GUI Intro" is the title for the window
    setLayout(new FlowLayout()); // set the layout as flow-layout

    helloWorld = new JLabel("hello, world"); // create a label saying "hello, world" 
                                            // and assign it to helloWorld
    add(helloWorld); // add the label to the window (GUIExample)

    anotherLb = new JLabel("just another label");
    add(anotherLb);
}   
</code></pre>

<p>}
```
Voil√†. Two labels are side by side now; you may not want the labels like that, we&rsquo;ll explore other layouts later. Try to resize your window and see what happened with labels.</p>

<p>Next step, we&rsquo;ll add a text-field displaying and entering text.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Swing GUI Intro (1)]]></title>
    <link href="http://blog.zhantong.org/2014/02/04/java-swing-gui-intro-1/"/>
    <updated>2014-02-04T06:45:21+00:00</updated>
    <id>http://blog.zhantong.org/2014/02/04/java-swing-gui-intro-1</id>
    <content type="html"><![CDATA[<p>Graphic User Interface (GUI) has more fun than console (somebody thinks so). In Java, we can use Swing, a native library for GUI, to create a GUI application instead of an application only interacting with console.</p>

<!--more-->


<p>For Swing, the most basic GUI element is a <strong>frame</strong>. Basically, the frame is the window showed in your desktop containing other elements like buttons, labels and many things you see in Java applications. We will talk about how to create a simple frame in this tutorial.</p>

<p>First, we need create two Java sources in the same package.
``` java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {

}
</code></pre>

<p>}
<code>
</code> java GUIExample.java
package example;</p>

<p>public class GUIExample {</p>

<p>}
<code>
Let GUIExample extend JFrame, i.e. GUIExample is a JFrame (a window). Don't forget import appropriate packages/classes.
</code> java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;</p>

<p>public class GUIExample extends JFrame {</p>

<p>}
<code>
Now, we have a empty class, we need a constructor for this class for a window.
</code> java GUIExample.java
package example;</p>

<p>import javax.swing.JFrame;</p>

<p>public class GUIExample extends JFrame {</p>

<pre><code>private static final long serialVersionUID = -8892132944702143244L; // remove warning in eclipse

public GUIExample() {
    // create a JFrame (superclass) with a title
    super("GUI Intro"); // "GUI Intro" is the title for the window
}
</code></pre>

<p>}
<code>
Til now, no other class refers to GUIExample. Main class is for running the window:
</code> java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {
    GUIExample window = new GUIExample(); // create a GUIExample called window
    window.setVisible(true); // show the window
}
</code></pre>

<p>}
<code>
If you run the program, you should see a very small "window" in your desktop environment. Obviously, it should not be such small.
</code> java Main.java
package example;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] args) {
    GUIExample window = new GUIExample(); // create a GUIExample called window
    window.setBounds(0, 0, 300, 500); // set the window with size of 300 * 500 at (0, 0) of your screen, i.e. up-left corner
    window.setVisible(true); // show the window
}
</code></pre>

<p>}
```
Compile and run; you should see a medium-sized window in your up-left corner. The program doesn&rsquo;t do anything except show a empty window.</p>

<p>Known how to set up a window, we can add <strong>components</strong> (such as buttons, labels, password fields) into the frame.</p>
]]></content>
  </entry>
  
</feed>
